#----------------Settings:----------------------------------------------
#print('Insert configfile directory:("/mnt/share/vcall/config_docker.yaml")')
#config_f = input()
#print('Configfile: ',config_f)
#configfile: config_f

configfile:"/mnt/share/vcall/config_docker.yaml"

#|_________Threading_sets:___________|

bwa_samblaster_sambamba_threads = config["BWA_samblaster_sambamba_threads"]
call_variants_threads = config["Call_Variants_threads"]
normal_vs_tumor_threads_threas = config["Normal_VS_Tumor_threads"]

#|__________Dir_settings:____________|

main_dir = config["main_dir"] 
genome_dir = config["genome_dir"]
sample_dir = config["sample_dir"] 
output_dir = config["output_dir"] 
logs_dir = config["logs_dir"]
jar_dir = config["jar_dir"]

#Annotation

jar_snpEff = config["jar_snpEff"]
jar_SnpSift = config["jar_SnpSift"]

GENOME = config["GENOME"]
KS1 = config["KS1"]
KS2 = config["KS2"]
KS3 = config["KS3"]

L_TARGET = config["TARGET"] #
C_TARGET = config["TARGET_C"] # improvised solution 
COSMIC = config["COSMIC"]

#|___________________________________|
#------------------------------------------------------------------------
rule bwa_index:
	input:
		fa = main_dir + genome_dir + GENOME + ".fasta"# GENOME = b37_human_g1k_v37_decoy.chr20
	output:
		main_dir + genome_dir + GENOME + '.fasta.sa' #inicial output em genome_dir
	message:
		'Building index -> {output}'
	shell:
		'bwa index {input.fa}' 

rule BWA_samblaster_sambamba: #Align reads to reference (using BWA); 
	input:
	 	index = main_dir + genome_dir + GENOME + '.fasta.sa',# GENOME = b37_human_g1k_v37_decoy.chr20
		ref = main_dir + genome_dir + GENOME + '.fasta',
		r_fow = main_dir + sample_dir + '{sample}.read1.fastq.gz',#R1
		r_rev = main_dir + sample_dir + '{sample}.read2.fastq.gz' #R2
	output:
		align = main_dir + output_dir + '{sample}.alignment.bam'
		#log = 'mnt/share/repo/example_dataset/BSS.NA12878.20p12.1.30x.log'
	threads: bwa_samblaster_sambamba_threads
	shell: 
		'bwa mem -t {threads} -R "@RG\\tID:{wildcards.sample}\\tPL:ILLUMINA\\tSM:{wildcards.sample}" -M {input.ref} {input.r_fow} {input.r_rev} | '
		'samblaster -M |'
		'sambamba view -S -f bam -l 0 /dev/stdin |'#/dev/stdin 
		'sambamba sort -m 4G -t {threads} -o {output.align} /dev/stdin 2>&1 ' #> {output.log}' #/dev/stdin 


rule gatk3_register:
	input:
		main_dir + 'GenomeAnalysisTK-3.8-1-0-gf15c1c3ef/GenomeAnalysisTK.jar'
		
	output:
		jar_dir +'gatk-3.8/GenomeAnalysisTK.jar'
		#jar_dir = '/opt/conda/opt/'
	shell:
		'gatk3-register {input}'

rule picard_dict:
	input:
		main_dir + genome_dir + GENOME + '.fasta'
	output:
		main_dir + genome_dir + GENOME + '.dict'
	shell:
		'picard CreateSequenceDictionary R={input} O={output}'

rule samtools_index:
	input:
		main_dir + genome_dir + GENOME + '.fasta'
	output:
		main_dir + genome_dir + GENOME + '.fasta.fai'
	shell:
		'samtools faidx {input}'

rule gatk_BaseRecalibrator: #multitheading error
	input:
		jar = jar_dir + 'gatk-3.8/GenomeAnalysisTK.jar',
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,#
		ksites3 = main_dir + genome_dir + KS3,
		#reads = main_dir + 'single_sample/NA12878.20p12.1.30x.bam'#single_sample
		reads = main_dir + output_dir + '{sample}.alignment.bam', #single_sample
		#reads = main_dir + '{sample}.alignment.bam', #single_sample
		#L = intervalfile
		#l_target = main_dir + sample_dir + TARGET
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data.grp',#"$sample"
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal.qsub'#/logs
	shell:
		'java -Xmx4g -jar {input.jar} \
		-T BaseRecalibrator -R {input.ref} -nct 2 \
		-knownSites {input.ksites1} \
		-knownSites {input.ksites2} \
		-knownSites {input.ksites3} \
		-I {input.reads} \
		-o {output.recal_data} --interval_padding 100 ' + L_TARGET + ' > {output.base_recal}'

rule gatk_BaseRecalibrator2: #multitheading error
	input:
		jar = jar_dir +'gatk-3.8/GenomeAnalysisTK.jar',
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,#
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data.grp',#"$sample"		
		#reads = main_dir + 'single_sample/NA12878.20p12.1.30x.bam'#single_sample
		reads = main_dir + '{sample}.alignment.bam',#single_sample
		#l_target = main_dir + sample_dir + TARGET
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data.grp',#"$sample"
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2.qsub'#/logs
	shell:
		'java -Xmx4g -jar {input.jar} \
		-T BaseRecalibrator -R {input.ref} -nct 2 \
		-knownSites {input.ksites1} \
		-knownSites {input.ksites2} \
		-knownSites {input.ksites3} \
		-BQSR {input.bqsr} \
		-I {input.reads} \
		-o {output.pos_recal_data} --interval_padding 100 ' + L_TARGET + ' > {output.base_recal}'
 

rule Analyze_Covariates:
	input:
		jar = jar_dir +'gatk-3.8/GenomeAnalysisTK.jar',
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data.grp'	
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots.pdf'
	shell:
		'java -Xmx2g -jar {input.jar} \
		-T AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data}'# \
		#-plots {output.pdf_log}'

rule Apply_recalibration: #multitheading error
	input:
		jar = jar_dir +'gatk-3.8/GenomeAnalysisTK.jar',
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data.grp',
		reads = main_dir + output_dir + '{sample}.alignment.bam'#,
		#pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots.pdf'
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal.qsub'
	shell:
		'java -Xmx4g -jar {input.jar} \
		-T PrintReads \
		-R {input.fa} --filter_bases_not_stored -nct 8 \
		-I {input.reads} \
		-BQSR {input.bqsr} \
		-o {output.recal} \
		> {output.apply_recal}'

rule Call_Variants:
	input:
		jar = jar_dir +'gatk-3.8/GenomeAnalysisTK.jar',
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal.bam',
		ksites1 = main_dir + genome_dir + KS1
	output:
		site = main_dir + output_dir + '{sample}.gvcf.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars.qsub'
	threads: call_variants_threads
	shell:
		'java -Xmx4g -jar {input.jar} \
		-T HaplotypeCaller -rf BadCigar -R {input.fa} \
		-ip 100 \
		-I {input.recal} \
		-stand_call_conf 10  --filter_bases_not_stored --emitRefConfidence GVCF \
		-D {input.ksites1} -variant_index_type LINEAR -variant_index_parameter 128000 \
		-nct {threads} \
		-o {output.site} ' + L_TARGET + ' > {output.logs}' 
		# in case of exÃµes (WES vs WGS) 
#VS
rule Normal_VS_Tumor:
	input:
		jar = jar_dir +'gatk-3.8/GenomeAnalysisTK.jar',
		ref = main_dir + genome_dir + GENOME + ".fasta",
		tumor = main_dir + output_dir + '{sample2}.T.sorted.nodups.realigned.recal.bam',#non_dinamic.bam #sample2
		normal = main_dir + output_dir + '{sample2}.N.sorted.nodups.realigned.recal.bam',#non_dinamic.bam #sample2
		dbSNP = main_dir + genome_dir + KS1
		#recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal.bam',
	output:
		main_dir + output_dir + '{sample2}.Normal_VS_Tumor_output.vcf'#sample2
	threads: normal_vs_tumor_threads_threas
	shell:
		' java -jar {input.jar} \
      		-T MuTect2 \
      		-R {input.ref} \
      		-I:tumor {input.tumor} \
      		-I:normal {input.normal} \
    		-nct {threads} \
      		--dbsnp {input.dbSNP} ' + COSMIC + ' ' + L_TARGET + ' -o {output}'

#|>CopyNumber_CNVkit:_(cnvkit.py , DNAcopy(an_R_package))_____________________________________________________________________________________________
rule CopyNumber_CNVkit: 
	input:
		tumor = main_dir + output_dir + '{sample3}.T.sorted.nodups.realigned.recal.bam',#{Sample}_Tumor.bam
		normal = main_dir + output_dir + '{sample3}.N.sorted.nodups.realigned.recal.bam',#{Sample}_Normal.bam
		fa = main_dir + genome_dir + GENOME + ".fasta"
	output:
		referc = main_dir + output_dir + '{sample3}.my_reference.cnn'
	shell:
		'cnvkit.py batch {input.tumor} --normal {input.normal} ' + C_TARGET + ' \
    	--fasta {input.fa} \
    	--output-reference {output.referc} --output-dir example/'
    	#--targets ' + C_TARGET + ' \


#|>Annotation:_(vt, snpEff/SnpSift, bcftools/htslib)_____________________________________________________________________________________________
rule Annotation:
	input:
		jar_snpeff = jar_snpEff +'snpeff-4.3.1t-2/snpEff.jar',
		pl_vcfEffOnePerLine = jar_snpEff + 'snpeff-4.3.1t-2/scripts/vcfEffOnePerLine.pl',
		jar_snpsift = jar_SnpSift + 'snpsift-4.3.1t-1/SnpSift.jar',
		exome = main_dir + output_dir + '{sample4}.Normal_VS_Tumor_output.vcf', #exome_seq_20181113_recalibrated_variants_postCGP_Gfiltered.vcf.gz
		fa = main_dir + genome_dir + GENOME + ".fasta"
	output:
		main_dir + output_dir + '{sample4}.exome_seq_final.vcf.gz'
	shell:
		'vt decompose -s {input.exome} | vt normalize -q -r {input.fa} - | \
		java -Xmx16g -jar {input.jar_snpeff} eff -noMotif -noNextProt -q -canon -hgvs -lof GRCh37.75 - | \
		{input.pl_vcfEffOnePerLine} | \
		bgzip > {output}'

'''
dbNSFP = "~/hg19/dbNSFP2.9_variants.txt.gz",
annot = "~/hg19/ExAC.r0.3.1.sites.vep.vcf.gz"
'''
'''
java -Xmx16g -jar{input.jar_snpeff} dbnsfp -f ESP6500_EA_AF,1000Gp1_AF,phastCons100way_vertebrate_rankscore,SIFT_score,SIFT_pred,Polyphen2_HDIV_score,Polyphen2_HDIV_pred,Polyphen2_HVAR_score,Polyphen2_HVAR_pred,LRT_score,LRT_pred,MutationTaster_score,MutationTaster_pred,MutationAssessor_score,MutationAssessor_pred,FATHMM_score,FATHMM_pred,MetaSVM_score,MetaSVM_pred,MetaLR_score,MetaLR_pred,CADD_phred,clinvar_clnsig,clinvar_trait -db {input.dbNSFP} - | \
java -Xmx16g -jar {jar_snpsift} annotate {input.annot} -info ExAC_AF_v0.3.1 -noID | \
		'''