#----------------Settings:----------------------------------------------
#print('Insert configfile directory:')
#config_f = input()
#print('Configfile: ',config_f)
#configfile: config_f
configfile: "/mnt/share/vcall/config_docker.yaml"
#|__________Dir_settings:____________|
main_dir = config["main_dir"] 
genome_dir = config["genome_dir"]
sample_dir = config["sample_dir"] 
output_dir = config["output_dir"] 
logs_dir = config["logs_dir"]
jar_dir = config["jar_dir"]

GENOME = config["GENOME"]
KS1 = config["KS1"]
KS2 = config["KS2"]
KS3 = config["KS3"]

L_TARGET = config["TARGET"]
COSMIC = config["COSMIC"]
#|___________________________________|
#------------------------------------------------------------------------
rule bwa_index:
	input:
		fa = main_dir + genome_dir + GENOME + ".fasta"# GENOME = b37_human_g1k_v37_decoy.chr20
	output:
		main_dir + genome_dir + GENOME + '.fasta.sa'
	message:
		'Building index -> {output}'
	shell:
		'bwa index {input.fa}' #funciona

rule BWA_samblaster_sambamba:
	input:
	 	index = main_dir + genome_dir + GENOME + '.fasta.sa',# GENOME = b37_human_g1k_v37_decoy.chr20
		ref = main_dir + genome_dir + GENOME + '.fasta',
		r_fow = main_dir + sample_dir + '{sample}.R1.fastq.gz',
		r_rev = main_dir + sample_dir + '{sample}.R2.fastq.gz'
	output:
		align = main_dir + output_dir + '{sample}.alignment.bam'
		#log = 'mnt/share/repo/example_dataset/BSS.NA12878.20p12.1.30x.log'
	#alterar "etiquetas" altearada -> NA12878
	shell: 
		'bwa mem -t {threads} -R "@RG\\tID:{wildcards.sample}\\tPL:ILLUMINA\\tSM:{wildcards.sample}" -M {input.ref} {input.r_fow} {input.r_rev} | '
		'samblaster -M |'
		'sambamba view -S -f bam -l 0 /dev/stdin |'#/dev/stdin 
		'sambamba sort -m 4G -t {threads} -o {output.align} /dev/stdin 2>&1 ' #> {output.log}' #/dev/stdin 


rule gatk3_register:
	input:
		main_dir + 'GenomeAnalysisTK-3.8-1-0-gf15c1c3ef/GenomeAnalysisTK.jar'
		
	output:
		jar_dir +'gatk-3.8/GenomeAnalysisTK.jar'
		#jar_dir = '/opt/conda/opt/'
	shell:
		'gatk-register {input}'

rule picard_dict:
	input:
		main_dir + genome_dir + GENOME + '.fasta'
	output:
		main_dir + genome_dir + GENOME + '.dict'
	shell:
		'picard CreateSequenceDictionary R={input} O={output}'

rule samtools_index:
	input:
		main_dir + genome_dir + GENOME + '.fasta'
	output:
		main_dir + genome_dir + GENOME + '.fasta.fai'
	shell:
		'samtools faidx {input}'

rule gatk_BaseRecalibrator: #multitheading error
	input:
		jar = jar_dir + 'gatk-3.8/GenomeAnalysisTK.jar',
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,#
		ksites3 = main_dir + genome_dir + KS3,
		#reads = main_dir + 'single_sample/NA12878.20p12.1.30x.bam'#single_sample
		reads = main_dir + output_dir + '{sample}.alignment.bam', #single_sample
		#reads = main_dir + '{sample}.alignment.bam', #single_sample
		#L = intervalfile
		#l_target = main_dir + sample_dir + TARGET
	output:
		recal_data = main_dir + output_dir + '{sample}.sorted.bam_pre_recal_data.grp',#"$sample"
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal.qsub'#/logs
	shell:
		'java -Xmx4g -jar {input.jar} \
		-T BaseRecalibrator -R {input.ref} -nct 2 \
		-knownSites {input.ksites1} \
		-knownSites {input.ksites2} \
		-knownSites {input.ksites3} \
		-I {input.reads} \
		-o {output.recal_data} --interval_padding 100 ' + L_TARGET + ' > {output.base_recal}'

rule gatk_BaseRecalibrator2: #multitheading error
	input:
		jar = jar_dir +'gatk-3.8/GenomeAnalysisTK.jar',
		ref = main_dir + genome_dir + GENOME + '.fasta',
		fai = main_dir + genome_dir + GENOME + '.fasta.fai',
		dict = main_dir + genome_dir + GENOME + '.dict',
		ksites1 = main_dir + genome_dir + KS1,
		ksites2 = main_dir + genome_dir + KS2,#
		ksites3 = main_dir + genome_dir + KS3,
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data.grp',#"$sample"		
		#reads = main_dir + 'single_sample/NA12878.20p12.1.30x.bam'#single_sample
		reads = main_dir + '{sample}.alignment.bam',#single_sample
		#l_target = main_dir + sample_dir + TARGET
	output:
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data.grp',#"$sample"
		base_recal = main_dir + output_dir + logs_dir +'{sample}.base_recal_2.qsub'#/logs
	shell:
		'java -Xmx4g -jar {input.jar} \
		-T BaseRecalibrator -R {input.ref} -nct 2 \
		-knownSites {input.ksites1} \
		-knownSites {input.ksites2} \
		-knownSites {input.ksites3} \
		-BQSR {input.bqsr} \
		-I {input.reads} \
		-o {output.pos_recal_data} --interval_padding 100 ' + L_TARGET + ' > {output.base_recal}'
 

rule Analyze_Covariates:
	input:
		jar = jar_dir +'gatk-3.8/GenomeAnalysisTK.jar',
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data.grp',
		pos_recal_data = main_dir + output_dir +'{sample}.sorted.bam_pos_recal_data.grp'	
	output:
		pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots.pdf'
	shell:
		'java -Xmx2g -jar {input.jar} \
		-T AnalyzeCovariates \
		-R {input.fa} \
		-before {input.bqsr} \
		-after {input.pos_recal_data}'# \
		#-plots {output.pdf_log}'

rule Apply_recalibration: #multitheading error
	input:
		jar = jar_dir +'gatk-3.8/GenomeAnalysisTK.jar',
		fa = main_dir + genome_dir + GENOME + ".fasta",
		bqsr = main_dir + output_dir +'{sample}.sorted.bam_pre_recal_data.grp',
		reads = main_dir + output_dir + '{sample}.alignment.bam'#,
		#pdf_log = main_dir + output_dir + logs_dir + '{sample}.sorted.bam_plots.pdf'
	output:
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal.bam',
		apply_recal = main_dir + output_dir + logs_dir + '{sample}.apply_recal.qsub'
	shell:
		'java -Xmx4g -jar {input.jar} \
		-T PrintReads \
		-R {input.fa} --filter_bases_not_stored -nct 8 \
		-I {input.reads} \
		-BQSR {input.bqsr} \
		-o {output.recal} \
		> {output.apply_recal}'

rule Call_Variants:
	input:
		jar = jar_dir +'gatk-3.8/GenomeAnalysisTK.jar',
		fa = main_dir + genome_dir + GENOME + ".fasta",
		recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal.bam',
		ksites1 = main_dir + genome_dir + KS1
	output:
		site = main_dir + output_dir + '{sample}.gvcf.gz',
		logs = main_dir + output_dir + logs_dir + '{sample}.call_vars.qsub'
	threads: 2
	shell:
		'java -Xmx4g -jar {input.jar} \
		-T HaplotypeCaller -rf BadCigar -R {input.fa} \
		-ip 100 \
		-I {input.recal} \
		-stand_call_conf 10  --filter_bases_not_stored --emitRefConfidence GVCF \
		-D {input.ksites1} -variant_index_type LINEAR -variant_index_parameter 128000 \
		-nct {threads} \
		-o {output.site} ' + L_TARGET + ' > {output.logs}' 
		# in case of ex√µes (WES vs WGS) 
#VS
rule Normal_VS_Tumor:
	input:
		jar = jar_dir +'gatk-3.8/GenomeAnalysisTK.jar',
		ref = main_dir + genome_dir + GENOME + ".fasta",
		tumor = main_dir + output_dir + '{sample2}.T.sorted.nodups.realigned.recal.bam',#non_dinamic.bam #sample2
		normal = main_dir + output_dir + '{sample2}.N.sorted.nodups.realigned.recal.bam',#non_dinamic.bam #sample2
		dbSNP = main_dir + genome_dir + KS1
		#recal = main_dir + output_dir + '{sample}.sorted.nodups.realigned.recal.bam',
	output:
		main_dir + output_dir + '{sample2}.Normal_VS_Tumor_output.vcf'#sample2
	threads: 2
	shell:
		' java -jar {input.jar} \
      	-T MuTect2 \
      	-R {input.ref} \
      	-I:tumor {input.tumor} \
      	-I:normal {input.normal} \
    	-nct {threads} \
      	--dbsnp {input.dbSNP} ' + COSMIC + ' ' + L_TARGET + ' -o {output}'
